<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dorakueyon</title>
    <link>https://dorakueyon.com/</link>
    <description>Recent content on dorakueyon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>matthew.at.muse@gmail.com (Yohei Iguchi)</managingEditor>
    <webMaster>matthew.at.muse@gmail.com (Yohei Iguchi)</webMaster>
    <copyright>© Yohei Iguchi 2018</copyright>
    <lastBuildDate>Sun, 09 Sep 2018 20:50:58 +0900</lastBuildDate>
    
        <atom:link href="https://dorakueyon.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rustを始めた</title>
      <link>https://dorakueyon.com/posts/2018/09/09/startrust/</link>
      <pubDate>Sun, 09 Sep 2018 20:50:58 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/09/09/startrust/</guid>
      <description>&lt;p&gt;今年は新しい言語を勉強できていなかったので、
Rustの勉強をはじめます.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018年に購読したサービス</title>
      <link>https://dorakueyon.com/posts/2018/08/13/subscribing-services-2018/</link>
      <pubDate>Mon, 13 Aug 2018 04:14:11 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/08/13/subscribing-services-2018/</guid>
      <description>

&lt;p&gt;ソフトウェアエンジニアリングを信奉している私にとって、積極的にサービスやソフトウェアにお金を払うようにしている.&lt;/p&gt;

&lt;p&gt;ということで、2018年も半年以上過ぎてきたが、2018年に購読していて思い出せるものだけ列挙した.&lt;/p&gt;

&lt;p&gt;下記金額は全て税込価格.かつ、ドル支払いをしている場合はその時点の為替に影響を受けているため、多少の誤差はご愛嬌.&lt;/p&gt;

&lt;h1 id=&#34;購読しているもの&#34;&gt;購読しているもの&lt;/h1&gt;

&lt;h2 id=&#34;amazon関連&#34;&gt;Amazon関連&lt;/h2&gt;

&lt;h3 id=&#34;amazon-prime&#34;&gt;Amazon Prime&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;3,900円/年&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Amazonで買い物をするから.
他にもPrime Nowで時間を無駄に消費させてくれる良質コンテンツが溢れている.&lt;/p&gt;

&lt;p&gt;おすすめは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/s?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;url=search-alias%3Dprime-instant-video&amp;amp;field-keywords=game+of+thrones&#34;&gt;Game Of Thrones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/s/?ref=nb_sb_noss_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;url=search-alias%3Dprime-instant-video&amp;amp;field-keywords=Mr+robot&amp;amp;rh=i%3Aprime-instant-video%2Ck%3AMr+robot&#34;&gt;Mr. ROBOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特にMR. ROBOTは視聴すると無性にコードを書きたくなる類稀なる作品.&lt;/p&gt;

&lt;p&gt;特に主人公が新規にPCセットアップするときなんかまず最初にKali Linuxをいれるところとか、幼少の頃に誰もが憧れをもつハッカー像そのまま.&lt;/p&gt;

&lt;p&gt;Tech系消費コンテンツとして&lt;a href=&#34;https://www.amazon.co.jp/gp/video/detail/B077TD11DK?ref_=atv_dp_season_select&#34;&gt;シリコンバレー&lt;/a&gt;よりディープでおすすめ.&lt;/p&gt;

&lt;h3 id=&#34;amazon-mastercard-ゴールド会員&#34;&gt;Amazon Mastercard ゴールド会員&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;実質420円/年&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;こちらはAmazonの利用金額が該当会員になった場合の損益分岐点を超えたために加入.&lt;/p&gt;

&lt;h3 id=&#34;amazon-fresh&#34;&gt;Amazon Fresh&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;500円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;コスパコスパでおなじみの勝間氏に影響されたのはここだけの話.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://katsumakazuyo.hatenablog.com/entry/2017/12/27/135705&#34;&gt;Amazonフレッシュが便利すぎて、最近Amazonフレッシュ以外から、生鮮品買っていない - 勝間和代が徹底的にマニアックな話をアップするブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アプリの使用勝手と配達対応時間は今のところそこそこ.
値段もそこそこ.&lt;/p&gt;

&lt;h3 id=&#34;aws&#34;&gt;AWS&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;130円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Herokuで公開しているサービスにRoute 53を利用中.&lt;/p&gt;

&lt;h2 id=&#34;netfrix&#34;&gt;Netfrix&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1,050円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;真面目に今この時点で世界最良のコンテンツはテラスハウス軽井沢編(2017年秋から開始されているもの)の副音声だと信じてる.&lt;/p&gt;

&lt;p&gt;Netfrixオリジナルのため、他のVideo On Demandサービスに乗り換えできない.&lt;/p&gt;

&lt;h2 id=&#34;spotify-ファミリープラン&#34;&gt;Spotify ファミリープラン&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1,480円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Amazon MusicやらAWAやら使った中で最終的に.&lt;/p&gt;

&lt;p&gt;Apple Watchも常時着けているのでApple生態系にどっぷりできたら幸せだったんだけど、音楽サービスコア価値はいかしたプレイリストだと痛感した.&lt;/p&gt;

&lt;h2 id=&#34;inkdrop&#34;&gt;Inkdrop&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;572円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;快進撃がとまらない(と個人的に密かに思っている)Markdownエディタ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inkdrop.info/&#34;&gt;Note-taking App with Robust Markdown Editor - Inkdrop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日本人のソフトエンジニアであるTakuya Matsuyama🐾氏&lt;a href=&#34;https://twitter.com/inkdrop_app?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed&amp;amp;ref_url=https%3A%2F%2Fwww.inkdrop.info%2F&#34;&gt;(@inkdrop_app)&lt;/a&gt;が個人で提供しているアプリ.&lt;/p&gt;

&lt;p&gt;Inkdrop以前はvim + 適当にalias作ってメモテーキングの日々だったのを一念発起して色々とMardownエディタを触った中で辿りついたのがInkdrop.&lt;/p&gt;

&lt;p&gt;60日間のフリートライアルや多少の学割もあるようなので、気軽に試していただくと吉.&lt;/p&gt;

&lt;h2 id=&#34;adobe-xd-単体プラン&#34;&gt;Adobe XD 単体プラン&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1,274円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;泣く子も黙るAdobeが放出したプロトタイプツールの真打.&lt;/p&gt;

&lt;p&gt;とはいえ自分がUXやデザイン触るときはSketch一択.&lt;/p&gt;

&lt;p&gt;エンジニア以外の人間と動くものを使って会話するとき、あるいは無駄な会話をさけるとき、Adobe XDはかなりご機嫌な感じ.&lt;/p&gt;

&lt;h2 id=&#34;1password&#34;&gt;1Password&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;448円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;パスワード認証世界で自分を守るため.&lt;/p&gt;

&lt;h2 id=&#34;icloud-50-gb-ストレージプラン&#34;&gt;iCloud: 50 GB ストレージプラン&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;130円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;iOS端末を買い換えたときとかにストレスなく移行できる最低限の容量が自分の中で50GB. ちなみにiOS端末はiPhone/iPadの2台での運用.&lt;/p&gt;

&lt;p&gt;写真の同期は論外でこればっかりはGoogle フォトを利用.&lt;/p&gt;

&lt;h2 id=&#34;google-drive-100-gb&#34;&gt;Google Drive 100 GB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;250円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;みなさん自炊した書籍データどのように保存していますか.&lt;/p&gt;

&lt;p&gt;僕の場合は現状Google Driveを利用.&lt;/p&gt;

&lt;p&gt;特に不満もなく.&lt;/p&gt;

&lt;h2 id=&#34;moneyforward&#34;&gt;Moneyforward&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;480円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1年以上前の数字が見れないで家計管理なんてできませんよね.&lt;/p&gt;

&lt;h2 id=&#34;anytimes-fitness&#34;&gt;Anytimes Fitness&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;8,618円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;平均週4で行くので１回あたり600 ~ 800円くらい.&lt;/p&gt;

&lt;h2 id=&#34;line-mobile&#34;&gt;LINE Mobile&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1,825円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;いいですよね.&lt;/p&gt;

&lt;h2 id=&#34;有料メルマガ&#34;&gt;有料メルマガ&lt;/h2&gt;

&lt;h3 id=&#34;週刊-life-is-beautiful&#34;&gt;週刊 Life is Beautiful&lt;/h3&gt;

&lt;h3 id=&#34;週刊金融日記&#34;&gt;週刊金融日記&lt;/h3&gt;

&lt;h3 id=&#34;堀江貴文のブログでは言えない話&#34;&gt;堀江貴文のブログでは言えない話&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;864円/月ずつ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ここらへんはお好みで.&lt;/p&gt;

&lt;p&gt;個人のおすすめとしては元Microsoftチーフアーキテクトの中島聡さんのメルマガ「Life is Beautiful」.&lt;/p&gt;

&lt;p&gt;昔から面白かったとはいえ、特にここ数年は(以前にもまして)複雑度が増している世界の変化を、技術者として楽しんでいることが文章からひしひしと伝わってくる.&lt;/p&gt;

&lt;p&gt;読んでる方も楽しい.&lt;/p&gt;

&lt;h2 id=&#34;料理通信-雑誌&#34;&gt;料理通信 (雑誌)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;720円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;高いきもするけど、僕の料理のインスピレーションの大事なひとつ.&lt;/p&gt;

&lt;h1 id=&#34;やめたもの&#34;&gt;やめたもの&lt;/h1&gt;

&lt;p&gt;ここからは購読してたがやめたもの.&lt;/p&gt;

&lt;h2 id=&#34;hulu&#34;&gt;Hulu&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1,007円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;単純にnasneでテレビ番組を録画すればよいと気づいてしまった. マツコ会議とか&lt;/p&gt;

&lt;h2 id=&#34;broad-wimax&#34;&gt;Broad Wimax&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;3,825円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;家と職場以外で作業することが少なくなったので解約.&lt;/p&gt;

&lt;h2 id=&#34;apple-watch-モバイル通信サービス&#34;&gt;Apple Watch モバイル通信サービス&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;350円/月&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Apple WatchでPodcastがストリーミングで聞けなかったのが致命的で解約(そして3大キャリアから格安SIM).&lt;/p&gt;

&lt;p&gt;ただ2018年秋からPodcastも対応する方向とのこと.&lt;/p&gt;

&lt;p&gt;Lineモバイルに変えてなければ. タイミングとはまさにこのこと.&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;みなさんゲームに課金するくらいならソフトウェア/サービスにお金を使いましょう.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>今の時代にブロック暗号(ECB)をGoでやってみる</title>
      <link>https://dorakueyon.com/posts/2018/08/12/ecbwithgo/</link>
      <pubDate>Sun, 12 Aug 2018 00:48:34 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/08/12/ecbwithgo/</guid>
      <description>

&lt;p&gt;暗号化、特に可逆な暗号化について.
ひょんなことから可逆な暗号化であるブロック暗号、特にECBに興味がでたので、実際にGoで触ってみたときのメモです.&lt;/p&gt;

&lt;p&gt;元データによって(よらなくても)は、他の暗号化より圧倒的に復号化しやすいという意味で安全性に難ありなので、まちがってもビジネス上で利用していないことを祈ります.&lt;/p&gt;

&lt;h2 id=&#34;実際にやってみる&#34;&gt;実際にやってみる&lt;/h2&gt;

&lt;p&gt;ECBのライブラリーがGoのcrypto/cipherに存在しないか色々と調べてみると、公式では対応しない選択をしたことがわかった.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/5597&#34;&gt;crypto/cipher: Add ECB support · Issue #5597 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We left ECB out intentionally: it&amp;rsquo;s insecure, and if needed it&amp;rsquo;s
trivial to implement.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;だそうです.&lt;/p&gt;

&lt;p&gt;なので自作の道でやりたいと思います.&lt;/p&gt;

&lt;p&gt;Repositoryは下記の通りです.&lt;/p&gt;

&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon%2fecb-sample-with-go&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;


&lt;h3 id=&#34;前処理-pkcs-5-padding&#34;&gt;前処理 (PKCS#5 Padding)&lt;/h3&gt;

&lt;p&gt;ブロック暗号を行う場合、暗号元のデータ長が、ブロック長の倍数である必要があります.&lt;/p&gt;

&lt;p&gt;ブロック長毎に暗号化を行なっていくので、なにかしらの手段で暗号元のデータをブロック長と同じ長さにする処理を、暗号化前に実行します.具体的にはパディング処理です.&lt;/p&gt;

&lt;p&gt;今回はPKCS#5 Paddingを利用しました.&lt;/p&gt;

&lt;p&gt;PKCS#5 Paddingは、足りない長さを、その長さの数値でパディングします.&lt;/p&gt;

&lt;p&gt;暗号化の長さがあと2バイトたりない場合は、0x02を2回ファイルの末尾に追加(padding)することで、ファイルの長さを合わせます.&lt;/p&gt;

&lt;p&gt;逆に、暗号化の長さとぴったり一緒の場合は、ブロック長のバイト数を、ブロック長回数分ファイル末尾に追加(padding)します. 例えばブロック長の長さが8byteで、ファイルの長さが8の倍数の場合(8, 16, 24&amp;hellip;)、0x08を8回となります&lt;/p&gt;

&lt;p&gt;実装すると下記のような感じ.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func PKCS5Padding(text []byte, blockSize int) []byte {
	padding := blockSize - len(text) % blockSize //padingは上記でいうブロック長に足りない長さ.ちょうどの場合はブロック長
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(text, padtext...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で前処理完了.&lt;/p&gt;

&lt;h3 id=&#34;ecb&#34;&gt;ECB&lt;/h3&gt;

&lt;p&gt;さっそくECB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/5597&#34;&gt;crypto/cipher: Add ECB support · Issue #5597 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の記事には、実装の手本がのっている.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;bs := block.BlockSize()
if len(plaintext) % bs != 0 { //前処理をしていれば、ブロック長倍になっている
  panic(&amp;quot;Need a multiple of the blocksize&amp;quot;)
}
ciphertext := make([]byte, len(plaintext))
for len(plaintext) &amp;gt; 0 {
  block.Encrypt(ciphertext, plaintext)
  plaintext = plaintext[bs:]
  ciphertext = ciphertext[bs:]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ciphertext := make([]byte, len(plaintext))で暗号化前の文章のサイズ分の領域を作っておき、for文以下で、ブロック長文毎、暗号化を行なっていく.&lt;/p&gt;

&lt;h3 id=&#34;つなげてみた&#34;&gt;つなげてみた&lt;/h3&gt;

&lt;p&gt;keyに暗号化で利用するkey、srcに暗号化したいinputをパラメーターでわたす.
inputがpaddingされ、ECBされる.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run main.go -key private-key -src hoge
[38 138 235 189 120 176 89 240]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暗号化されたものが出力された.
なるほど.&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Goを使ったECBの実装をざっとおうことができた.
次の機会には、「暗号技術入門」なんかを読み直しつつ、気になる暗号化処理を触ってみたい.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BlockchainをGoを使って学ぶ (或いはGoをBlockChainを使って学ぶ)</title>
      <link>https://dorakueyon.com/posts/2018/08/07/blockchainwithgo/</link>
      <pubDate>Tue, 07 Aug 2018 22:43:32 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/08/07/blockchainwithgo/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;Goを使って何かがしたい. という気持ちと、Blockchainを学んでみたい、という気持ちが交差した.&lt;/p&gt;

&lt;p&gt;今回はいたって平凡な取り組みとなるが、Goを使ったBlockchainの実装を紹介.&lt;/p&gt;

&lt;p&gt;参考にしたのはQiitaでバズっていた下記記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hidehiro98/items/841ece65d896aeaa8a2a&#34;&gt;ブロックチェーンを作ることで学ぶ 〜ブロックチェーンがどのように動いているのか学ぶ最速の方法は作ってみることだ〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記は下記の翻訳記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/learn-blockchains-by-building-one-117428612f46&#34;&gt;Learn Blockchains by Building One – Hacker Noon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先人の肩の上に乗らせていただく.
感謝しかない.&lt;/p&gt;

&lt;p&gt;謝謝nagaoka先生.&lt;/p&gt;

&lt;h2 id=&#34;goを使ってblockchain実装する際に感じたこと&#34;&gt;Goを使ってBlockChain実装する際に感じたこと&lt;/h2&gt;

&lt;p&gt;GitHubのRepositoryは下記です.&lt;/p&gt;

&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon%2fgochain&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;


&lt;p&gt;ディレクトリの構成としては&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── blockchain
│   ├── blockchain.go
│   ├── blockchain_test.go
│   ├── model.go
│   ├── proof.go
│   └── validation.go
├── data
│   └── blockchain.data
├── main.go
└── server
    ├── server.go
    └── server_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じになっています.&lt;/p&gt;

&lt;p&gt;基本、Blockchain関連の処理はblockchainフォルダ、Web Serverを立てたりエンドポイント毎に処理を切り分けたりする処理をserverフォルダにいれています.&lt;/p&gt;

&lt;p&gt;データのやりとりのところを少してこづりまして、本家の実装(python)だと、全てメモリ上で完結(インスタンス化したblockchainクラスの中で処理が完結)していたので、Goでもと思ったのですが、ポインタをWeb Serverにうまく受け渡しができませんでした.&lt;/p&gt;

&lt;p&gt;デモレベルでDB入れるのもなんだったので、最終的に&lt;a href=&#34;https://golang.org/pkg/encoding/gob/&#34;&gt;gob&lt;/a&gt;を利用しています.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/delphinus/items/67a796cb7876132a1ec0&#34;&gt;データのやりとりに gob を使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;データのsaveとloadの部分をblockchain/model.goの中で記載しています. そのsave/laodの処理を、Web Serverのエンドポイント処理を開始する時点と終了する時点で利用しています.&lt;/p&gt;

&lt;p&gt;あとは割とすんなり実装完了.&lt;/p&gt;

&lt;h2 id=&#34;実際動かしてみて-とまとめ&#34;&gt;実際動かしてみて、とまとめ&lt;/h2&gt;

&lt;p&gt;アプリ側の動くところまでは簡単にいけたのですが、実際には複数サーバ上(単一サーバの場合は除く)で動かすケースが多いはずなので、これはインフラ側も合わせて試してみないと、(分散型管理台帳型の)Blockhainがわかったといえなそう.&lt;/p&gt;

&lt;p&gt;ということで今回はGoを学びました.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; Gihub &#43; 独自ドメイン(お名前.com) でSSLな話し</title>
      <link>https://dorakueyon.com/posts/2018/07/24/hugogithuboriginaldomainssl/</link>
      <pubDate>Tue, 24 Jul 2018 21:42:02 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/07/24/hugogithuboriginaldomainssl/</guid>
      <description>

&lt;p&gt;題名通り、新たにHugoを使ったブログを作るときに利用したサイトとかをメモ.&lt;/p&gt;

&lt;p&gt;そもそもブログを作るに至った経緯はまた別の話し.&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;h3 id=&#34;導入&#34;&gt;導入&lt;/h3&gt;

&lt;p&gt;Hugoの導入(ローカルでserver動かしてWebブラウザでみるところまで)は特にハマりどころなし.
お好きな記事でどうぞ.&lt;/p&gt;

&lt;h3 id=&#34;デザインの選定&#34;&gt;デザインの選定&lt;/h3&gt;

&lt;p&gt;ここは沼にハマると一番時間がかかる部分.
Hugoの見た目は基本下記3パターンのアプローチがある.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ふろむフルスクラッチ&lt;/li&gt;
&lt;li&gt;既存のThemeを利用してそのまま利用&lt;/li&gt;
&lt;li&gt;既存のThemeを利用しつつ上書き修正&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.はまずHugo初級者からすると下調べから時間かかるので却下。
ということで普通の人は2.か3.にいきつくと思う.&lt;/p&gt;

&lt;p&gt;結論、3. にならざるおえないかな.&lt;/p&gt;

&lt;p&gt;まずは2.で落ち着けるか下記の公式を巡回&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Complete List | Hugo Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;400近いThemesから自分の理想なThe Oneを見つけるのは胸が苦しくなったのでいくつかのランキング系まとめサイトに逃げた.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/theme-recommendations/5816/5&#34;&gt;Theme recommendations - support - Hugo Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://terrty.net/2018/15-hugo-framework-blog-themes/&#34;&gt;15 Hugo Framework blog themes - Notes on Blue Skies&lt;/a&gt;)]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欲しかったのはシンプル/ミニマリスティックなやつ.
結局200近くくらい見比べつつ適当に手元にcloneしながら確認しつつ、最終的に下記のThemeに決めた&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-one/&#34;&gt;Hugo Theme One | Hugo Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その名も&amp;rdquo;One&amp;rdquo;.
そう、まさに僕だけのThe Oneだね.&lt;/p&gt;

&lt;p&gt;ただ英語が基本のデザインなのか、自分の狙う感じのデザインには若干ずれてる. ちょっとそれじゃない感が要所要所にある感じ.&lt;/p&gt;

&lt;p&gt;そうすると気になるところからHTML/CSS修正したくなってしまい、結局多少デザインいじることに.&lt;/p&gt;

&lt;p&gt;差分は下記のような感じ.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diff -r ./layouts ./themes/one/layouts | grep -E &#39;^[\+|-]\s&#39; | wc -l
      26

$ diff -r ./static/css ./themes/one/static/css | grep -E &#39;^[\+|-]\s&#39; | wc -l
      61
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html系が26行前後、cssが61行言語修正した. (加筆修正含む)
こうしてみると100行以下修正するだけで個人的に満足いくデザインになるのは嬉しい.&lt;/p&gt;

&lt;p&gt;ちなみに今回初めて知った名詞でblog-card|ブログカードというものがあって、なんてことはないはてぶとかでよく見るやつ
↓これ
&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;ライトな記法で↑みたいに展開するために、layouts配下に新規にshortcodesフォルダを追加して、他の方々のやつを参考に自分でも使わせていただいた.&lt;/p&gt;

&lt;p&gt;あまり使いすぎるとHugo以外に移行するときに移行スクリプトの作成が必要になるかな. という不安も拭えないのであまり種類ふやさず運用していこう.&lt;/p&gt;

&lt;p&gt;ここまででとりあえずローカル上で動くところまでおわる.&lt;/p&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;h3 id=&#34;導入-1&#34;&gt;導入&lt;/h3&gt;

&lt;p&gt;ここも特に難しい所はないはずなので、特に記載はしません.&lt;/p&gt;

&lt;p&gt;ここまででとりあえずWeb上で動くところまでおわる.
そしてこの時点でSSL対応も完了しているのでとりあえずサイトをWebに公開したい、っていう人はここまで.&lt;/p&gt;

&lt;p&gt;ただしドメインはgithub.io&lt;/p&gt;

&lt;p&gt;ベンダーロックインは死んでもするなと死んだおじいさんに言われているので、感動も冷めやらぬまま独自ドメインの設定に.&lt;/p&gt;

&lt;h2 id=&#34;独自ドメイン&#34;&gt;独自ドメイン&lt;/h2&gt;

&lt;p&gt;ドメインを持っていなければまずは取得ということになる.
これは正直なんでもよい。&lt;/p&gt;

&lt;p&gt;ムーム? ディグネーション？とか色々あるけどやはり日本語名称の安心感から&lt;a href=&#34;https://www.onamae.com&#34;&gt;お名前.com&lt;/a&gt;を利用.&lt;/p&gt;

&lt;p&gt;ここからSSLを見越したDSNの設定をしていく.&lt;/p&gt;

&lt;h2 id=&#34;またまたgithub-ssl化&#34;&gt;またまたGithub (SSL化)&lt;/h2&gt;

&lt;p&gt;SSLにしようと色々とCloudFrontとか使って頑張ろうとしたんだけど、結局Github側でgithub.ioのSSL化まで対応されていた.(2018年2月ごろより)&lt;/p&gt;

&lt;p&gt;CloudFrontにNSむけてしまっていたがシンプルな構成にするためにGithub側でのSSL化をすることに.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/foobaron/items/cd9cfc403defa706372b&#34;&gt;GitHub Pages + 独自ドメイン + HTTPS (SSL) のサポートをGitHubが提供開始 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここらへんを参考に、ドメイン管理サイト側でAレコードを設定していく.&lt;/p&gt;

&lt;p&gt;設定は完了したのだがTTLが標準のままだったようなので各所のDNSサーバーに新Aレコード設定が染み渡るのは時間がかかるようでまだサイトへの疎通が確認できていない.&lt;/p&gt;

&lt;p&gt;このページが見れているということは新しい設定が世界に染み渡った結果です.&lt;/p&gt;

&lt;p&gt;ちなみに&amp;rdquo;染み出す&amp;rdquo;というワードを使う人が現職で多いのだけど、使うのが恥ずかしくて意識をしないと口からでてこない.&lt;/p&gt;

&lt;p&gt;以上です.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HelloWorld</title>
      <link>https://dorakueyon.com/posts/2018/07/23/sample/</link>
      <pubDate>Mon, 23 Jul 2018 22:17:39 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/07/23/sample/</guid>
      <description>&lt;p&gt;initial commit&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>