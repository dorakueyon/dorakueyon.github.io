<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on dorakueyon</title>
    <link>https://dorakueyon.com/categories/tech/</link>
    <description>Recent content in tech on dorakueyon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>matthew.at.muse@gmail.com (Yohei Iguchi)</managingEditor>
    <webMaster>matthew.at.muse@gmail.com (Yohei Iguchi)</webMaster>
    <copyright>© Yohei Iguchi 2020</copyright>
    <lastBuildDate>Mon, 30 Dec 2019 09:05:09 +0900</lastBuildDate>
    
        <atom:link href="https://dorakueyon.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firebase フロントエンド(Vue.js)/Cloud Functions を同一docker-composeで実行する際に感じたこと</title>
      <link>https://dorakueyon.com/posts/2019/12/30/firebase-project-on-docker/</link>
      <pubDate>Mon, 30 Dec 2019 09:05:09 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2019/12/30/firebase-project-on-docker/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;2019/12/30現在において、Firebaseを開発する際に生じる不都合の一つとして、node version管理があると思います.&lt;/p&gt;

&lt;p&gt;Cloud Functionsの開発において、nodeのバージョンはversion8、あるいは10がサポートされています.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Functions ランタイムに関数をデプロイするには Firebase CLI が必要です。Node.js バージョン 8 と 10 がサポートされています。Node.js と npm をインストールする場合は、Node Version Manager をおすすめします。
&lt;a href=&#34;https://firebase.google.com/docs/functions/get-started?hl=ja&#34;&gt;https://firebase.google.com/docs/functions/get-started?hl=ja&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、こんなことが頻発します.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dorakueyon&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;% yarn build
yarn run v1.19.2
error functions@: The engine &lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt; is incompatible with this module. Expected version &lt;span class=&#34;s2&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;. Got &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.15.3&amp;#34;&lt;/span&gt;
error Commands cannot run with an incompatible environment.
info Visit https://yarnpkg.com/en/docs/cli/run &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; documentation about this command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、異なるversionが依存する開発では、その依存性をDockerに閉じ込めることで幸せになれます.&lt;/p&gt;

&lt;p&gt;参考として、githubにcodeを置かせていただきました.
&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon%2fvue-firebase-cloud-function-docker-starter&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2 id=&#34;vue-js-cloud-functionsのフォルダ構成&#34;&gt;Vue.js + Cloud Functionsのフォルダ構成&lt;/h2&gt;

&lt;p&gt;Docker化する前に、プロジェクトを作成した上でフォルダ構成をみてみます.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue.js + Firebaseプロジェクト作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vue create project-name
$ firebase init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;フォルダ構成 (node_modules配下を除いています)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.
├── README.md
├── babel.config.js
├── firebase.json
├── functions
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   ├── src
│   └── tsconfig.json
├── node_modules
├── package.json
├── public
│   ├── favicon.ico
│   └── index.html
├── src
│   ├── App.vue
│   ├── assets
│   ├── components
│   ├── main.ts
│   ├── router
│   ├── shims-tsx.d.ts
│   ├── shims-vue.d.ts
│   └── views
├── tsconfig.json
└── yarn.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FrontとCloud Functionsを開発する場合、プロジェクト直下と./funcions直下とで開発環境が分かれます.&lt;/p&gt;

&lt;p&gt;それぞれにDockerfileを配置した上で、プロジェクト直下にdocker-compose.ymlを配置します.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerファイルを追加したフォルダ構成 (node_modules配下を除いています)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.
├── Dockerfile &amp;lt;-
├── README.md
├── babel.config.js
├── docker-compose.yml &amp;lt;-
├── firebase.json
├── functions
│   ├── Dockerfile &amp;lt;-
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   ├── src
│   │     ├── index.ts
│   │     └── services
│   │         └── project-name -&amp;gt; ../../../src/services/project-name &amp;lt;- シンボリックリンク
│   └── tsconfig.json
├── node_modules
├── package.json
├── public
│   ├── favicon.ico
│   └── index.html
├── src
│   ├── App.vue
│   ├── assets
│   ├── components
│   ├── main.ts
│   ├── router
│   ├── services
│   │   └── project-name &amp;lt;- シンボリックリンク先
│   │       └── constants.ts
│   ├── shims-tsx.d.ts
│   ├── shims-vue.d.ts
│   └── views
├── tsconfig.json
└── yarn.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;docker化&#34;&gt;Docker化&lt;/h2&gt;

&lt;p&gt;Docker化にむけて、下記の要件があります.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクト直下のfirebase関連ファイル(firebase.json, .firebaserc)を、./functions側でも参照したい&lt;/li&gt;
&lt;li&gt;./functions側からプロジェクト直下の定数やtypeをシンボリックリンクで参照する場合がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記を念頭に、&lt;code&gt;Dockerfile/docker-compose.yml&lt;/code&gt;を作成します.&lt;/p&gt;

&lt;h3 id=&#34;プロジェクト直下のdockerfile&#34;&gt;プロジェクト直下のDockerfile&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;こちらは特に考えることはありません&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:12-alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; WORKDIR /work&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; $WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY package.json &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; yarn&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY tsconfig.json &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY *.config.js &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY public &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY src &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;/src&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; yarn serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;functionsのdockerfile&#34;&gt;./functionsのDockerfile&lt;/h3&gt;

&lt;p&gt;./functions/Dockerfileと、./docker-comose.ymlを比較しながらご確認ください.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WORKDIRを&lt;code&gt;/work/functions&lt;/code&gt;とする&lt;/li&gt;
&lt;li&gt;./functions直下のファイルCOPYは、コピー元をプロジェクト直下からの相対パスで指定する&lt;/li&gt;
&lt;li&gt;プロジェクト直下のファイルCOPYは、コンテナの&lt;code&gt;/work&lt;/code&gt;配下に設置する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:8-alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; WORKDIR /work/functions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; $WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY ./functions/package.json &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; yarn&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# firebase&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; yarn global add firebase-tools&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY ./functions/tsconfig.json &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY ./functions/lib &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;/lib&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY ./functions/src &lt;span class=&#34;nv&#34;&gt;$WORKDIR&lt;/span&gt;/src&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# # for symbolic link (./functions/src/services/project-name)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# COPY ./src/services/project-name /work/src/services/project-name&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# firebase&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY firebase.json /work&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY .firebaserc /work&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# COPY ./functions/.runtimeconfig.json $WORKDIR # if needed&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# COPY ./functions/credentials $WORKDIR/credentials # if needed&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# settings for runtime emulator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; HOST 0.0.0.0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 5000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 9005&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;プロジェクト直下のdocker-compose-yml&#34;&gt;プロジェクト直下のdocker-compose.yml&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;上記Cloud FunctionsのDockerfileにあわせるため&lt;code&gt;build:&lt;/code&gt;のcontext, dockerfileを別に指定する&lt;/li&gt;
&lt;li&gt;symbolic linkされている(プロジェクト直下にある)実体ファイルの変更もfunctions側のdockerに反映させるため、&lt;code&gt;./src:/work/src&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;version: &lt;span class=&#34;s1&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;services:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    main:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        build: .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        container_name: front&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        volumes:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - ./public:/work/public&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - ./src:/work/src&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        ports:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;:8080&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        tty: true&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        command: yarn serve&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    functions:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        build:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            context: ./&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            dockerfile: ./functions/Dockerfile&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        container_name: functions&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        volumes:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - ./functions/lib:/work/functions/lib&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - ./functions/src:/work/functions/src&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - ./src:/work/src &lt;span class=&#34;c1&#34;&gt;# for symbolic link&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;# environment:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;#    - GOOGLE_APPLICATION_CREDENTIALS=./credentials/firebase-adminsdk.json&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        ports:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - &lt;span class=&#34;m&#34;&gt;5000&lt;/span&gt;:5000&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;            - &lt;span class=&#34;m&#34;&gt;9005&lt;/span&gt;:9005&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        tty: true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;開発の場合&#34;&gt;開発の場合&lt;/h2&gt;

&lt;p&gt;開発環境立ち上げます&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker-compose build &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その後の開発は下記のようにすすめます&lt;/p&gt;

&lt;h3 id=&#34;front&#34;&gt;front&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8080&lt;/code&gt;にVue.jsプロジェクトがホットリロードされます&lt;/p&gt;

&lt;h3 id=&#34;cloud-functions&#34;&gt;Cloud Functions&lt;/h3&gt;

&lt;p&gt;こちらは多少面倒ではあります&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dockerコンテナに入る&lt;/li&gt;
&lt;li&gt;firebase loginしていなければfirebase loginを実施&lt;/li&gt;
&lt;li&gt;firebase serveやfirebase functions:shellなどでdebugging&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下 &lt;code&gt;docker exec functions -it sh&lt;/code&gt; してコンテナ内で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ firebase login # if you are not logged in.
$ firebase serve
$ firebase functions:shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cloud Functionsのデバッグについてはまだペインが多いです..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/functions/local-shell?hl=ja&#34;&gt;関数をインタラクティブにテストする(Firebase official)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;firebase loginの認証情報を永続化(都度&lt;code&gt;fireabase login&lt;/code&gt;したくない)人は下記のサイトが参考になるかもしれません(試していません..)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pannpers/items/244a7e3c18d8c8422e4f&#34;&gt;[Firebase] Cloud Functionsで消耗したくない人のために、開発環境のベストプラクティスをまとめていったらDockerに行き着いた話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deploy&#34;&gt;deploy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;github actions/ circleCIなど利用したほうがよいでしょう.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;少し強引な形となってしまいましたが、Dockerの恩恵をうけることができる状態までできました.
ただし、&lt;code&gt;./functions/Dockerfile&lt;/code&gt;のフォルダのコンテキストが親階層直下にある点に気持ち悪さがあります.&lt;/p&gt;

&lt;p&gt;ここの気持ちわるさの解消は今後の課題とします.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rustを始めた</title>
      <link>https://dorakueyon.com/posts/2018/09/09/startrust/</link>
      <pubDate>Sun, 09 Sep 2018 20:50:58 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/09/09/startrust/</guid>
      <description>&lt;p&gt;今年は新しい言語を勉強できていなかったので、
Rustの勉強をはじめます.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>今の時代にブロック暗号(ECB)をGoでやってみる</title>
      <link>https://dorakueyon.com/posts/2018/08/12/ecbwithgo/</link>
      <pubDate>Sun, 12 Aug 2018 00:48:34 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/08/12/ecbwithgo/</guid>
      <description>

&lt;p&gt;暗号化、特に可逆な暗号化について.
ひょんなことから可逆な暗号化であるブロック暗号、特にECBに興味がでたので、実際にGoで触ってみたときのメモです.&lt;/p&gt;

&lt;p&gt;元データによって(よらなくても)は、他の暗号化より圧倒的に復号化しやすいという意味で安全性に難ありなので、まちがってもビジネス上で利用していないことを祈ります.&lt;/p&gt;

&lt;h2 id=&#34;実際にやってみる&#34;&gt;実際にやってみる&lt;/h2&gt;

&lt;p&gt;ECBのライブラリーがGoのcrypto/cipherに存在しないか色々と調べてみると、公式では対応しない選択をしたことがわかった.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/5597&#34;&gt;crypto/cipher: Add ECB support · Issue #5597 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We left ECB out intentionally: it&amp;rsquo;s insecure, and if needed it&amp;rsquo;s
trivial to implement.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;だそうです.&lt;/p&gt;

&lt;p&gt;なので自作の道でやりたいと思います.&lt;/p&gt;

&lt;p&gt;Repositoryは下記の通りです.&lt;/p&gt;

&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon%2fecb-sample-with-go&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;


&lt;h3 id=&#34;前処理-pkcs-5-padding&#34;&gt;前処理 (PKCS#5 Padding)&lt;/h3&gt;

&lt;p&gt;ブロック暗号を行う場合、暗号元のデータ長が、ブロック長の倍数である必要があります.&lt;/p&gt;

&lt;p&gt;ブロック長毎に暗号化を行なっていくので、なにかしらの手段で暗号元のデータをブロック長と同じ長さにする処理を、暗号化前に実行します.具体的にはパディング処理です.&lt;/p&gt;

&lt;p&gt;今回はPKCS#5 Paddingを利用しました.&lt;/p&gt;

&lt;p&gt;PKCS#5 Paddingは、足りない長さを、その長さの数値でパディングします.&lt;/p&gt;

&lt;p&gt;暗号化の長さがあと2バイトたりない場合は、0x02を2回ファイルの末尾に追加(padding)することで、ファイルの長さを合わせます.&lt;/p&gt;

&lt;p&gt;逆に、暗号化の長さとぴったり一緒の場合は、ブロック長のバイト数を、ブロック長回数分ファイル末尾に追加(padding)します. 例えばブロック長の長さが8byteで、ファイルの長さが8の倍数の場合(8, 16, 24&amp;hellip;)、0x08を8回となります&lt;/p&gt;

&lt;p&gt;実装すると下記のような感じ.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PKCS5Padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockSize&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;padding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockSize&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//padingは上記でいうブロック長に足りない長さ.ちょうどの場合はブロック長
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;padtext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;padtext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記で前処理完了.&lt;/p&gt;

&lt;h3 id=&#34;ecb&#34;&gt;ECB&lt;/h3&gt;

&lt;p&gt;さっそくECB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/5597&#34;&gt;crypto/cipher: Add ECB support · Issue #5597 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の記事には、実装の手本がのっている.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;BlockSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//前処理をしていれば、ブロック長倍になっている
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Need a multiple of the blocksize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ciphertext := make([]byte, len(plaintext))で暗号化前の文章のサイズ分の領域を作っておき、for文以下で、ブロック長文毎、暗号化を行なっていく.&lt;/p&gt;

&lt;h3 id=&#34;つなげてみた&#34;&gt;つなげてみた&lt;/h3&gt;

&lt;p&gt;keyに暗号化で利用するkey、srcに暗号化したいinputをパラメーターでわたす.
inputがpaddingされ、ECBされる.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run main.go -key private-key -src hoge
[38 138 235 189 120 176 89 240]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暗号化されたものが出力された.
なるほど.&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Goを使ったECBの実装をざっとおうことができた.
次の機会には、「暗号技術入門」なんかを読み直しつつ、気になる暗号化処理を触ってみたい.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BlockchainをGoを使って学ぶ (或いはGoをBlockChainを使って学ぶ)</title>
      <link>https://dorakueyon.com/posts/2018/08/07/blockchainwithgo/</link>
      <pubDate>Tue, 07 Aug 2018 22:43:32 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/08/07/blockchainwithgo/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;Goを使って何かがしたい. という気持ちと、Blockchainを学んでみたい、という気持ちが交差した.&lt;/p&gt;

&lt;p&gt;今回はいたって平凡な取り組みとなるが、Goを使ったBlockchainの実装を紹介.&lt;/p&gt;

&lt;p&gt;参考にしたのはQiitaでバズっていた下記記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hidehiro98/items/841ece65d896aeaa8a2a&#34;&gt;ブロックチェーンを作ることで学ぶ 〜ブロックチェーンがどのように動いているのか学ぶ最速の方法は作ってみることだ〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記は下記の翻訳記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/learn-blockchains-by-building-one-117428612f46&#34;&gt;Learn Blockchains by Building One – Hacker Noon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先人の肩の上に乗らせていただく.
感謝しかない.&lt;/p&gt;

&lt;p&gt;謝謝nagaoka先生.&lt;/p&gt;

&lt;h2 id=&#34;goを使ってblockchain実装する際に感じたこと&#34;&gt;Goを使ってBlockChain実装する際に感じたこと&lt;/h2&gt;

&lt;p&gt;GitHubのRepositoryは下記です.&lt;/p&gt;

&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon%2fgochain&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;


&lt;p&gt;ディレクトリの構成としては&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── blockchain
│   ├── blockchain.go
│   ├── blockchain_test.go
│   ├── model.go
│   ├── proof.go
│   └── validation.go
├── data
│   └── blockchain.data
├── main.go
└── server
    ├── server.go
    └── server_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じになっています.&lt;/p&gt;

&lt;p&gt;基本、Blockchain関連の処理はblockchainフォルダ、Web Serverを立てたりエンドポイント毎に処理を切り分けたりする処理をserverフォルダにいれています.&lt;/p&gt;

&lt;p&gt;データのやりとりのところを少してこづりまして、本家の実装(python)だと、全てメモリ上で完結(インスタンス化したblockchainクラスの中で処理が完結)していたので、Goでもと思ったのですが、ポインタをWeb Serverにうまく受け渡しができませんでした.&lt;/p&gt;

&lt;p&gt;デモレベルでDB入れるのもなんだったので、最終的に&lt;a href=&#34;https://golang.org/pkg/encoding/gob/&#34;&gt;gob&lt;/a&gt;を利用しています.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/delphinus/items/67a796cb7876132a1ec0&#34;&gt;データのやりとりに gob を使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;データのsaveとloadの部分をblockchain/model.goの中で記載しています. そのsave/laodの処理を、Web Serverのエンドポイント処理を開始する時点と終了する時点で利用しています.&lt;/p&gt;

&lt;p&gt;あとは割とすんなり実装完了.&lt;/p&gt;

&lt;h2 id=&#34;実際動かしてみて-とまとめ&#34;&gt;実際動かしてみて、とまとめ&lt;/h2&gt;

&lt;p&gt;アプリ側の動くところまでは簡単にいけたのですが、実際には複数サーバ上(単一サーバの場合は除く)で動かすケースが多いはずなので、これはインフラ側も合わせて試してみないと、(分散型管理台帳型の)Blockhainがわかったといえなそう.&lt;/p&gt;

&lt;p&gt;ということで今回はGoを学びました.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; Gihub &#43; 独自ドメイン(お名前.com) でSSLな話し</title>
      <link>https://dorakueyon.com/posts/2018/07/24/hugogithuboriginaldomainssl/</link>
      <pubDate>Tue, 24 Jul 2018 21:42:02 +0900</pubDate>
      <author>matthew.at.muse@gmail.com (Yohei Iguchi)</author>
      <guid>https://dorakueyon.com/posts/2018/07/24/hugogithuboriginaldomainssl/</guid>
      <description>

&lt;p&gt;題名通り、新たにHugoを使ったブログを作るときに利用したサイトとかをメモ.&lt;/p&gt;

&lt;p&gt;そもそもブログを作るに至った経緯はまた別の話し.&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;h3 id=&#34;導入&#34;&gt;導入&lt;/h3&gt;

&lt;p&gt;Hugoの導入(ローカルでserver動かしてWebブラウザでみるところまで)は特にハマりどころなし.
お好きな記事でどうぞ.&lt;/p&gt;

&lt;h3 id=&#34;デザインの選定&#34;&gt;デザインの選定&lt;/h3&gt;

&lt;p&gt;ここは沼にハマると一番時間がかかる部分.
Hugoの見た目は基本下記3パターンのアプローチがある.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ふろむフルスクラッチ&lt;/li&gt;
&lt;li&gt;既存のThemeを利用してそのまま利用&lt;/li&gt;
&lt;li&gt;既存のThemeを利用しつつ上書き修正&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.はまずHugo初級者からすると下調べから時間かかるので却下。
ということで普通の人は2.か3.にいきつくと思う.&lt;/p&gt;

&lt;p&gt;結論、3. にならざるおえないかな.&lt;/p&gt;

&lt;p&gt;まずは2.で落ち着けるか下記の公式を巡回&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Complete List | Hugo Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;400近いThemesから自分の理想なThe Oneを見つけるのは胸が苦しくなったのでいくつかのランキング系まとめサイトに逃げた.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/theme-recommendations/5816/5&#34;&gt;Theme recommendations - support - Hugo Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://terrty.net/2018/15-hugo-framework-blog-themes/&#34;&gt;15 Hugo Framework blog themes - Notes on Blue Skies&lt;/a&gt;)]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欲しかったのはシンプル/ミニマリスティックなやつ.
結局200近くくらい見比べつつ適当に手元にcloneしながら確認しつつ、最終的に下記のThemeに決めた&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-one/&#34;&gt;Hugo Theme One | Hugo Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その名も&amp;rdquo;One&amp;rdquo;.
そう、まさに僕だけのThe Oneだね.&lt;/p&gt;

&lt;p&gt;ただ英語が基本のデザインなのか、自分の狙う感じのデザインには若干ずれてる. ちょっとそれじゃない感が要所要所にある感じ.&lt;/p&gt;

&lt;p&gt;そうすると気になるところからHTML/CSS修正したくなってしまい、結局多少デザインいじることに.&lt;/p&gt;

&lt;p&gt;差分は下記のような感じ.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diff -r ./layouts ./themes/one/layouts | grep -E &#39;^[\+|-]\s&#39; | wc -l
      26

$ diff -r ./static/css ./themes/one/static/css | grep -E &#39;^[\+|-]\s&#39; | wc -l
      61
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html系が26行前後、cssが61行言語修正した. (加筆修正含む)
こうしてみると100行以下修正するだけで個人的に満足いくデザインになるのは嬉しい.&lt;/p&gt;

&lt;p&gt;ちなみに今回初めて知った名詞でblog-card|ブログカードというものがあって、なんてことはないはてぶとかでよく見るやつ
↓これ
&lt;iframe
  class=&#34;hatenablogcard&#34;
  style=&#34;width:100%;height:155px;max-width:420px;&#34;
  src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdorakueyon&#34;
  title=&#34;&#34;
  width=&#34;300&#34;
  height=&#34;150&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;ライトな記法で↑みたいに展開するために、layouts配下に新規にshortcodesフォルダを追加して、他の方々のやつを参考に自分でも使わせていただいた.&lt;/p&gt;

&lt;p&gt;あまり使いすぎるとHugo以外に移行するときに移行スクリプトの作成が必要になるかな. という不安も拭えないのであまり種類ふやさず運用していこう.&lt;/p&gt;

&lt;p&gt;ここまででとりあえずローカル上で動くところまでおわる.&lt;/p&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;h3 id=&#34;導入-1&#34;&gt;導入&lt;/h3&gt;

&lt;p&gt;ここも特に難しい所はないはずなので、特に記載はしません.&lt;/p&gt;

&lt;p&gt;ここまででとりあえずWeb上で動くところまでおわる.
そしてこの時点でSSL対応も完了しているのでとりあえずサイトをWebに公開したい、っていう人はここまで.&lt;/p&gt;

&lt;p&gt;ただしドメインはgithub.io&lt;/p&gt;

&lt;p&gt;ベンダーロックインは死んでもするなと死んだおじいさんに言われているので、感動も冷めやらぬまま独自ドメインの設定に.&lt;/p&gt;

&lt;h2 id=&#34;独自ドメイン&#34;&gt;独自ドメイン&lt;/h2&gt;

&lt;p&gt;ドメインを持っていなければまずは取得ということになる.
これは正直なんでもよい。&lt;/p&gt;

&lt;p&gt;ムーム? ディグネーション？とか色々あるけどやはり日本語名称の安心感から&lt;a href=&#34;https://www.onamae.com&#34;&gt;お名前.com&lt;/a&gt;を利用.&lt;/p&gt;

&lt;p&gt;ここからSSLを見越したDSNの設定をしていく.&lt;/p&gt;

&lt;h2 id=&#34;またまたgithub-ssl化&#34;&gt;またまたGithub (SSL化)&lt;/h2&gt;

&lt;p&gt;SSLにしようと色々とCloudFrontとか使って頑張ろうとしたんだけど、結局Github側でgithub.ioのSSL化まで対応されていた.(2018年2月ごろより)&lt;/p&gt;

&lt;p&gt;CloudFrontにNSむけてしまっていたがシンプルな構成にするためにGithub側でのSSL化をすることに.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/foobaron/items/cd9cfc403defa706372b&#34;&gt;GitHub Pages + 独自ドメイン + HTTPS (SSL) のサポートをGitHubが提供開始 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここらへんを参考に、ドメイン管理サイト側でAレコードを設定していく.&lt;/p&gt;

&lt;p&gt;設定は完了したのだがTTLが標準のままだったようなので各所のDNSサーバーに新Aレコード設定が染み渡るのは時間がかかるようでまだサイトへの疎通が確認できていない.&lt;/p&gt;

&lt;p&gt;このページが見れているということは新しい設定が世界に染み渡った結果です.&lt;/p&gt;

&lt;p&gt;ちなみに&amp;rdquo;染み出す&amp;rdquo;というワードを使う人が現職で多いのだけど、使うのが恥ずかしくて意識をしないと口からでてこない.&lt;/p&gt;

&lt;p&gt;以上です.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>